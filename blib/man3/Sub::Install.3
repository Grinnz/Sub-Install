.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sub::Install 3"
.TH Sub::Install 3 "2005-11-22" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Sub::Install \- install subroutines into packages easily
.SH "VERSION"
.IX Header "VERSION"
version 0.03
.PP
.Vb 1
\& $Id: /my/rjbs/subinst/trunk/lib/Sub/Install.pm 16622 2005-11-23T00:17:55.304991Z rjbs  $
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Sub::Install;
.Ve
.PP
.Vb 5
\&  Sub::Install::install_sub({
\&    code => sub { ... },
\&    into => $package,
\&    as   => $subname
\&  });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module makes it easy to install subroutines into packages without the
unslightly mess of \f(CW\*(C`no strict\*(C'\fR or typeglobs lying about where just anyone can
see them.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .Sh """ install_sub """
.el .Sh "\f(CW install_sub \fP"
.IX Subsection " install_sub "
.Vb 5
\&  Sub::Install::install_sub({
\&   code => \e&subroutine,
\&   into => "Finance::Shady",
\&   as   => 'launder',
\&  });
.Ve
.PP
This routine installs a given code reference into a package as a normal
subroutine.  The above is equivalent to:
.PP
.Vb 2
\&  no strict 'refs';
\&  *{"Finance::Shady" . '::' . "launder"} = \e&subroutine;
.Ve
.PP
If \f(CW\*(C`into\*(C'\fR is not given, the sub is installed into the calling package.
.PP
If \f(CW\*(C`code\*(C'\fR is not a code reference, it is looked for as an existing sub in the
package named in the \f(CW\*(C`from\*(C'\fR parameter.  If \f(CW\*(C`from\*(C'\fR is not given, it will look
in the calling package.
.PP
If \f(CW\*(C`as\*(C'\fR is not given, and if \f(CW\*(C`code\*(C'\fR is a name, \f(CW\*(C`as\*(C'\fR will default to \f(CW\*(C`code\*(C'\fR.
If \f(CW\*(C`as\*(C'\fR is not given, but if \f(CW\*(C`code\*(C'\fR is a code ref, Sub::Install will try to
find the name of the given code ref and use that as \f(CW\*(C`as\*(C'\fR.
.PP
That means that this code:
.PP
.Vb 6
\&  Sub::Install::install_sub({
\&    code => 'twitch',
\&    from => 'Person::InPain',
\&    into => 'Person::Teenager',
\&    as   => 'dance',
\&  });
.Ve
.PP
is the same as:
.PP
.Vb 1
\&  package Person::Teenager;
.Ve
.PP
.Vb 4
\&  Sub::Install::install_sub({
\&    code => Person::InPain->can('twitch'),
\&    as   => 'dance',
\&  });
.Ve
.ie n .Sh """ reinstall_sub """
.el .Sh "\f(CW reinstall_sub \fP"
.IX Subsection " reinstall_sub "
This routine behaves exactly like \f(CW\*(C`\*(L"install_sub\*(R"\*(C'\fR, but does not emit a
warning if warnings are on and the destination is already defined.
.ie n .Sh """ install_installers """
.el .Sh "\f(CW install_installers \fP"
.IX Subsection " install_installers "
This routine is provided to allow Sub::Install compatibility with
Sub::Installer.  It installs \f(CW\*(C`install_sub\*(C'\fR and \f(CW\*(C`reinstall_sub\*(C'\fR methods on the
package in its \f(CW\*(C`into\*(C'\fR argument.
.PP
.Vb 2
\& Sub::Install::install_installers('Code::Builder'); # just for us, please
\& Code::Builder->install_sub({ name => $code_ref });
.Ve
.PP
.Vb 2
\& Sub::Install::install_installers('UNIVERSAL'); # feeling lucky, punk?
\& Anything::At::All->install_sub({ moniker => $sub_ref });
.Ve
.PP
The installed installers are similar, but not identical, to those provided by
Sub::Installer.  They accept a single hash as an argument.  The key/value pairs
are used as the \f(CW\*(C`as\*(C'\fR and \f(CW\*(C`code\*(C'\fR parameters to the \f(CW\*(C`install_sub\*(C'\fR routine
detailed above.  The package name on which the method is called is used as the
\&\f(CW\*(C`into\*(C'\fR parameter.
.PP
Unlike Sub::Installer's \f(CW\*(C`install_sub\*(C'\fR will not eval strings into code, but
will look for named code in the calling package.
.SH "EXPORTS"
.IX Header "EXPORTS"
Sub::Install exports \f(CW\*(C`install_sub\*(C'\fR and \f(CW\*(C`reinstall_sub\*(C'\fR only if they are
requested.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Sub::Installer" 4
.IX Item "Sub::Installer"
This module is (obviously) a reaction to Damian Conway's Sub::Installer, which
does the same thing, but does it by getting its greasy fingers all over
\&\s-1UNIVERSAL\s0.  I was really happy about the idea of making the installation of
coderefs less ugly, but I couldn't bring myself to replace the ugliness of
typeglobs and loosened strictures with the ugliness of \s-1UNIVERSAL\s0 methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes, \f(CW\*(C`<rjbs@cpan.org>\*(C'\fR
.PP
Several of the tests are adapted from tests that shipped with Damian Conway's
Sub-Installer distribution.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-sub\-install@rt.cpan.org\*(C'\fR,
or through the web interface at <http://rt.cpan.org>.  I will be notified, and
then you'll automatically be notified of progress on your bug as I make
changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 Ricardo Signes, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
